import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Creating the dataset
data = {
    'Hours_Studied': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Exam_Score': [10, 20, 30, 40, 50, 60, 70, 75, 85, 95]
}

df = pd.DataFrame(data)

# Splitting independent and dependent variables
X = df[['Hours_Studied']]  # Independent variable (feature)
Y = df['Exam_Score']       # Dependent variable (target)

# Splitting the dataset into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Creating and training the model
model = LinearRegression()
model.fit(X_train, Y_train)

# Making predictions
Y_pred = model.predict(X_test)

# Calculating Mean Squared Error
mse = mean_squared_error(Y_test, Y_pred)

# Displaying results
print(f"Mean Squared Error: {mse:.2f}")
print(f"Model Coefficient (Slope): {model.coef_[0]:.2f}")
print(f"Model Intercept: {model.intercept_:.2f}")

# Plotting the regression line and data points
plt.scatter(X, Y, color='blue', label="Actual Data")  # Scatter plot of actual data
plt.plot(X, model.predict(X), color='red', label="Regression Line")  
plt.xlabel("Hours Studied")  
plt.ylabel("Exam Score")   
plt.title("Linear Regression: Study Hours vs Exam Score")  
plt.legend()  
plt.show()
